// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RacingProject.Server.Data;

namespace RacingProject.Server.Migrations
{
    [DbContext(typeof(RacingProjectContext))]
    partial class RacingProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("RacingProject.Server.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfLaps")
                        .HasColumnType("int");

                    b.Property<int?>("RacingSerieId")
                        .HasColumnType("int");

                    b.Property<int>("RacingSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RacingSerieId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RacingProject.Server.Models.RaceResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("FinalPosition")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("ScoredPoints")
                        .HasColumnType("int");

                    b.Property<int>("StartingPosition")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("RacingProject.Server.Models.RacingSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RacingSeries");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RacingSerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RacingSerieId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Driver", b =>
                {
                    b.HasOne("RacingProject.Server.Models.Team", "Team")
                        .WithMany("Drivers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Race", b =>
                {
                    b.HasOne("RacingProject.Server.Models.RacingSerie", "RacingSerie")
                        .WithMany("Races")
                        .HasForeignKey("RacingSerieId");

                    b.Navigation("RacingSerie");
                });

            modelBuilder.Entity("RacingProject.Server.Models.RaceResult", b =>
                {
                    b.HasOne("RacingProject.Server.Models.Driver", "Driver")
                        .WithMany("RaceResults")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RacingProject.Server.Models.Race", "Race")
                        .WithMany("RaceResults")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Team", b =>
                {
                    b.HasOne("RacingProject.Server.Models.RacingSerie", "RacingSerie")
                        .WithMany()
                        .HasForeignKey("RacingSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RacingSerie");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Driver", b =>
                {
                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Race", b =>
                {
                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("RacingProject.Server.Models.RacingSerie", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("RacingProject.Server.Models.Team", b =>
                {
                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
